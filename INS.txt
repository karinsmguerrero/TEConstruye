SELECT id,name,description,def FROM stage_type;
INSERT INTO stage_type (name,description,def)
VALUES ('Trabajo preliminar','description',TRUE),
('Concreto','description',TRUE)
Select * FROM supplies
SELECT id,name,price FROM supplies
INSERT INTO supplies (name,price)
VALUES ('Concreto',3000),
('Madera',1000)



-----------------------------------------------------------------
CREATE FUNCTION get_fullname(uname VARCHAR(60))
RETURNS VARCHAR(190) AS $$
DECLARE fullname VARCHAR(190);
BEGIN
        SELECT  CONCAT(firstname, ' ', lastnamea,' ',lastnameb)  
		INTO fullname
        FROM    users
        WHERE   username = $1;

        RETURN fullname;
END;
$$  LANGUAGE plpgsql

-----------------------------------------------
  
  
  CREATE VIEW vProject AS
    SELECT project.id, project.name,lotarea,rooms,restrooms,
		floors,builtarea, client AS client_username,
		get_fullname(client) AS client_name,
		province,canton,district
    FROM project INNER JOIN location 
	ON project.idlocation= location.id
	
--------------------------------------------------
CREATE FUNCTION get_location(id int)
RETURNS VARCHAR(190) AS $$
DECLARE loc VARCHAR(190);
BEGIN
        SELECT  CONCAT(province, ',', canton,',',district)  
		INTO loc
        FROM    location
        WHERE   location.id = $1;

        RETURN loc;
END;
$$  LANGUAGE plpgsql
    
------------------------------------------------------------

CREATE FUNCTION get_idlocation(province VARCHAR(60),canton VARCHAR(60),district VARCHAR(60))
RETURNS INT AS $$
DECLARE loc INT;
BEGIN
        SELECT  id
		INTO loc
        FROM    location
        WHERE   (location.province = $1
		AND location.canton = $2
		AND location.district = $3);

        RETURN loc;
END;
$$  LANGUAGE plpgsql
-------------------------------------------------------------------------

--Agregar proyecto
CREATE OR REPLACE PROCEDURE addProject(name VARCHAR(250),lotarea INT, builtarea INT, 
									   rooms INT, restrooms INT, 
									   floors INT, client VARCHAR(60),
									   province VARCHAR(60),canton VARCHAR(60),
									   district VARCHAR(60))
LANGUAGE plpgsql    
AS $$
BEGIN
    -- Insertar propiedad
	INSERT INTO project(name,lotarea,builtarea,rooms,
					   restrooms,floors,client,idlocation)
	VALUES($1,$2,$3,$4,$5,$6,$7,get_idlocation($8,$9,$10)); 
    COMMIT;
END;
$$;
--------------------------------------------------------------------------
CREATE VIEW vStage AS
    SELECT stage.id, stage_type.name AS stagetype,startdate,enddate,idproject
    FROM stage INNER JOIN stage_type 
	ON stage.stagetype= stage_type.id;
	
---------------------------------------------------------------------------

  CREATE VIEW vPayrollEmployees AS
    SELECT stage.idproject,project.name AS project_name,
	idstage, stage.stagetype AS stage_name, 
	worker_on_project.username AS employee_username,
	get_fullname(worker_on_project.username) AS employee, 
	project.name,worker_on_project.hours, employee.salary,
	employee.salary*worker_on_project.hours AS total
    FROM worker_on_project INNER JOIN stage 
	ON worker_on_project.idstage= stage.id
	INNER JOIN employee 
	ON worker_on_project.username=employee.username
	INNER JOIN project 
	ON project.id=stage.idproject;
	
----------------------------------------------------------------------------------
CREATE FUNCTION get_payroll_budget(idstage INT)
RETURNS INT AS $$
DECLARE total INT;
BEGIN
        SELECT  SUM(vPayrollEmployees.total)
		INTO total
        FROM    vPayrollEmployees
        WHERE   (vPayrollEmployees.idstage = $1);
        RETURN total;
END;
$$  LANGUAGE plpgsql
-------------------------------------------------------------------------------------
  CREATE VIEW vExpenses AS
    SELECT stage.idproject,project.name AS project_name,
	idstage, stage.stagetype AS stage_name, 
	bill_item.quantity*supplies.price AS total
    FROM bill INNER JOIN stage 
	ON bill.idstage= stage.id
	INNER JOIN project 
	ON project.id=stage.idproject
	INNER JOIN bill_item 
	ON bill.id=bill_item.idbill
	INNER JOIN supplies
	ON bill_item.idsupply=supplies.id;
	
---------------------------------------------------------------------------------------------

CREATE FUNCTION get_expenses_budget(idstage INT)
RETURNS INT AS $$
DECLARE total INT;
BEGIN
        SELECT  SUM(vExpenses.total)
		INTO total
        FROM    vPayrollEmployees
        WHERE   (vPayrollEmployees.idstage = $1);
        RETURN total;
END;
$$  LANGUAGE plpgsql
----------------------------------------------------------------------------------------------

  CREATE VIEW vExpensesByStage AS
    SELECT stage.idproject,project.name AS project_name,
	idstage, stage.stagetype AS stage_name, 
	 get_expenses_budget(idstage) AS Expenses,
	 get_payroll_budget(idstage) AS payroll
    FROM bill INNER JOIN stage 
	ON bill.idstage= stage.id
	INNER JOIN project 
	ON project.id=stage.idproject
	INNER JOIN bill_item 
	ON bill.id=bill_item.idbill
	INNER JOIN supplies
	ON bill_item.idsupply=supplies.id;
	
	
SELECT idproject,project_name,idstage,stage_name,
expenses,payroll,(expenses+payroll) AS total 
FROM vExpensesByStage


-------------------------------------------------------------------------------------------------

CREATE FUNCTION get_expenses_project(idproject INT)
RETURNS INT AS $$
DECLARE total INT;
BEGIN
        SELECT  SUM(vExpensesByStage.expenses)+ SUM(vExpensesByStage.payroll)
		INTO total
        FROM    vExpensesByStage
        WHERE   (vExpensesByStage.idproject = $1);
        RETURN total;
END;
$$  LANGUAGE plpgsql

-----------------------------------------------------------------------------------------------------
SELECT DISTINCT idproject,project_name,
	get_expenses_project(idproject) AS total
	FROM vExpensesByStage;
	
-----------------------------------------------------------------------------------------------------

CREATE VIEW vSuppliesByStage AS
	SELECT idproject,project.name AS project_name,
		idstage, stage_type.name AS stage_type, 
		idsupply, supplies.name AS supply_name,
		quantity,price, (quantity*price)AS total
	FROM supplies_on_project 
		INNER JOIN stage 
			ON supplies_on_project.idstage= stage.id
		INNER JOIN project
			ON stage.idproject=project.id
		INNER JOIN supplies 
			ON supplies.id=supplies_on_project.idsupply
		INNER JOIN stage_type
			ON stage_type.id=stage.stagetype
			
			
--------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get_payroll_budget_2(
    idstage integer)
    RETURNS integer
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
DECLARE total INT;
BEGIN

IF EXISTS (SELECT 1 FROM vPayrollEmployees pay WHERE pay.idstage = $1 ) THEN
  -- do something
  
  SELECT  SUM(vPayrollEmployees.total)
    INTO total
        FROM    vPayrollEmployees
        WHERE   (vPayrollEmployees.idstage = $1);
        RETURN total;
  else 
    return 0;
    end if;
END;